openapi: 3.0.0
info:
  title: Music Bands Service
  version: 1.0.0
  description: Простое API для взаимодействия с коллекцией музыкальных групп
servers:
  - url: 'https://localhost:8080/api/v1/'

paths:
  /bands:
    post:
      summary: Создание новой группы
      tags: 
        - Bands
      operationId: createBand
      requestBody:
        required: true
        content:
            application/json:
              schema:
                $ref: "#/components/schemas/Band"
      responses:
        '201':
          description: Успешно создано
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Band"
        '400':
           description: Ошибка. Данные введены некорректно
           content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 400
                  message:
                    type: string
                    example: ['Координата y не может быть меньше -439']
        '404':
          description: Ошибка по умолчанию
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
    get:
      summary: Получение групп (включая сортировку и фильтрацию)
      tags:
        - Bands
      operationId: getBands
      parameters:
        - name: sort
          in: query
          description: Параметр для сортировки
          required: false
          schema:
            type: string
            enum:
              - id
              - name
              - creationDate
              - numberOfParticipants
              - genre
            example: name
        - name: order
          in: query
          description: Направление сортировки (ASC по умолчанию, варианты регистронезависимые)
          required: false
          schema:
            type: string
            enum:
              - ASC
              - DESC
            example: ASC
        - name: filter
          in: query
          description: >+
            Параметр для фильтрации. Структура: filter={parameter}[operator]={type}. Строковые значения в type регистронезависимы \

            **Доступные параметры для фильтрации:** id, name, coordinate.x, coordinate.y, creationDate, numberOfParticipants, person.name, genre.
            
            **Доступные операторы:** 
            
            * **gt - больше.** При использовании со строками возвращает значения ниже по алфавиту
            
            * **gte - больше или равно.** При использовании со строками возвращает значения ниже по алфавиту
            
            * **lt - меньше.** При использовании со строками возвращает значения выше по алфавиту
            
            * **lte - меньше или равно.** При использовании со строками возвращает значения выше по алфавиту
            
            * **eq - равно** 
            
            * **neq - не равно**

            * **~ - содержит**
            
          required: false
          schema:
            type: array
            items:
              type: string
              example: "name[eq]=ZOLOTO"
            example: ["name[gt]=acdc", "numberOfParticipants[lt]=3"]
        - name: page
          in: query
          description: Номер страницы (начиная с 1)
          required: false
          schema:
            type: integer
            minimum: 1
            example: 1
        - name: size
          in: query
          description: Размер страницы (количество элементов на одной странице)
          required: false
          schema:
            type: integer
            minimum: 1
            example: 10
      responses:
        '200':
          description: Успешный ответ с массивом групп
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Band"
                  total:
                    type: integer
                    description: Общее количество элементов
                  totalPages:
                    type: integer
                    description: Общее количество страниц
                  currentPage:
                    type: integer
                    description: Текущий номер страницы
                  size:
                    type: integer
                    description: Размер страницы
        '400':
          description: Ошибка. Неправильные параметры фильтрации или сортировки
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 400
                  message:
                    type: string
                    example: Неправильные параметры
        '404':
          description: Ошибка по умолчанию
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
  /bands/{band-id}:
    get:
      summary: Получение группы по идентификатору
      tags: 
        - Bands
      operationId: getPersonById
      parameters:
        - name: band-id
          description: Идентификатор группы
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Успешный ответ с данными о группе
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Band"
        '404':
          description: Ошибка по умолчанию
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
    delete:
      summary: Удаление группы по идентификатору
      tags: 
        - Bands
      operationId: deleteBandById
      parameters:
        - name: band-id
          description: Идентификатор группы
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Ресурс удален успешно
          content:
            application/json: {}
        '404':
          description: Ошибка по умолчанию
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
    put:
      summary: Обновление данных о группе по идентификатору
      tags: 
        - Bands
      operationId: updateBandById
      parameters:
        - name: band-id
          description: Идентификатор группы
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
            application/json:
              schema:
                $ref: "#/components/schemas/BandUpdate"
      responses:
        '200':
          description: Успешный ответ с данными об обновлённой группе
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Band"
        '400':
           description: Ошибка. Данные введены некорректно
           content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 400
                  message:
                    type: string
                    example: Координата y не может быть меньше -439
        '404':
          description: Ошибка по умолчанию
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
  /bands/genre/{genre}:
    delete:
      summary: Удаление групп по жанру
      description: Регистронезависимый запрос
      tags: 
        - Bands
      operationId: deleteBandsByGenre
      parameters:
        - name: genre
          description: Жанр группы
          in: path
          required: true
          schema:
            type: string
            enum:
              - ROCK
              - SOUL
              - MATH_ROCK
              - POST_ROCK
      responses:
        '204':
          description: Ресурс успешно удален
          content:
            application/json: {}
        '404':
          description: Ошибка по умолчанию
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
  /bands/genre/min:
    get:
      summary: Получение группы с минимальным жанром
      description: >+
        Сортировка идёт по жанрам в алфавитном порядке, минимальным является последний в списке. Если таких групп несколько, берется та группа, чье название будет первым по алфавиту:
        
        1. MATH_ROCK
        
        2. POST_ROCK
        
        3. ROCK
        
        4. SOUL
      tags:
        - Bands
      operationId: getGroupWithMinGenre
      responses:
          '200':
            description: Успешный ответ с минимальным жанром
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Band'
          '400':
            description: Ошибка. Неправильные параметры
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    code:
                      type: integer
                      format: int32
                      example: 400
                    message:
                      type: string
                      example: Неправильные параметры
          '404':
            description: Ошибка по умолчанию
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/DefaultError'
components:
  schemas:
    BandProperties:
      type: object
      properties:
        id:
          type: integer
          minimum: 1
          uniqueItems: true
          readOnly: true
        name:
          type: string
          minLength: 1
        coordinates:
          $ref: '#/components/schemas/Coordinates'
        creationDate:
          type: string
          format: date-time
          readOnly: true
          default: "2011-12-03T10:15:30+01:00"
        numberOfParticipants:
          type: number
          format: int64
          minimum: 1
        description:
          type: string
        genre:
          $ref: '#/components/schemas/MusicGenre'
        frontMan:
          $ref: '#/components/schemas/Frontman'
        singles:
          type: array
          items:
            $ref: '#/components/schemas/Single'
            
    Band:
      type: object
      allOf: 
        - $ref: '#/components/schemas/BandProperties'
        - required:
          - id
          - name
          - coordinates
          - creationDate
          - numberOfParticipants
          - description
          - genre
    
    BandUpdate:
      type: object
      allOf: 
        - $ref: '#/components/schemas/BandProperties'
          
    Person:
      type: object
      properties:
        id:
          type: integer
          minimum: 1
          uniqueItems: true
          readOnly: true
        name:
          type: string
          minLength: 1
        birthday:
          type: string
          format: date
          nullable: true
        passportID:
          type: string
          uniqueItems: true
        location:
          $ref: '#/components/schemas/Location'
        groupID:
          type: integer
      required:
        - id
        - passportID
        - location
        - groupID

    Single:
      type: object
      properties:
        id:
          type: integer
          minimum: 1
          uniqueItems: true
          readOnly: true
        name:
          type: string
          minLength: 1
          maxLength: 10
      required:
        - id
        - name

    Coordinates:
      type: object
      properties:
        id:
          type: integer
          minimum: 1
          uniqueItems: true
          readOnly: true
        x:
          type: number
          format: int64
        y:
          type: number
          format: double
          minimum: -439
          nullable: false
      required:
        - id
        - x
        - y
        
    Location:
      type: object
      properties:
        id:
          type: integer
          minimum: 1
          uniqueItems: true
          readOnly: true
        x:
          type: number
          format: float
          nullable: false
        y:
          type: number
          format: float
        z:
          type: integer
        name:
          type: string
          minLength: 1
          nullable: true
      required:
        - id
        - x
        - y
        - z
        
    MusicGenre:
      type: string
      enum:
        - ROCK
        - SOUL
        - MATH_ROCK
        - POST_ROCK
    
    DefaultError:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 404
        message:
          type: string
          example: Ресурс не найден

    Frontman:
      type: object
      properties:
        id:
          type: integer
          minimum: 1
          uniqueItems: true
          readOnly: true
        name:
          type: string
          minLength: 1
        birthday:
          type: string
          format: date
          nullable: true
        passportID:
          type: string
          uniqueItems: true
        location:
          $ref: '#/components/schemas/Location'
      required:
        - id
        - passportID
        - location